import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

public class GuessingGameGUI extends JFrame {
    private JLabel betLabel;
    private JTextField betField;
    private JLabel guessLabel;
    private JTextField guessField;
    private JButton playButton;
    private JTextArea resultArea;
    private int randomNumber;
    private int playerBet;
    private int totalMoney;
    private int roundsPlayed;
    private int[] roundResults; // Array to store the results of each round

    public GuessingGameGUI() {
        // Set up the JFrame properties
        setTitle("Guessing Game with Betting");
        setSize(300, 200);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(4, 2));

        // Initialize components
        betLabel = new JLabel("Enter your bet:");
        betField = new JTextField();
        guessLabel = new JLabel("Enter your guess (1 or 2):");
        guessField = new JTextField();
        playButton = new JButton("Play");
        resultArea = new JTextArea();
        resultArea.setEditable(false);

        // Add components to the JFrame
        add(betLabel);
        add(betField);
        add(guessLabel);
        add(guessField);
        add(playButton);
        add(resultArea);

        // Add ActionListener to the playButton
        playButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                playGame();
            }
        });

        // Initialize game variables
        totalMoney = 0;
        roundsPlayed = 0;
        roundResults = new int[10]; // Initialize the array to store 10 rounds of results
    }

    private void playGame() {
        // Check if the maximum rounds (10) have been played
        if (roundsPlayed >= 10) {
            resultArea.setText("Game over! You played 10 rounds.\nTotal money: " + totalMoney + " coins.");

            // Display round-by-round results
            resultArea.append("\nRound-by-round results:");
            for (int i = 0; i < 10; i++) {
                resultArea.append("\nRound " + (i + 1) + ": " + roundResults[i] + " coins");
            }

            playButton.setEnabled(false); // Disable the playButton after 10 rounds.
            return;
        }

        // Get the player's bet and guess from the text fields
        try {
            playerBet = Integer.parseInt(betField.getText());
            int playerGuess = Integer.parseInt(guessField.getText());

            // Generate a random number between 1 and 2
            randomNumber = new Random().nextInt(2) + 1;

            // Determine if the player won or lost the bet
            if (playerGuess == randomNumber) {
                totalMoney += playerBet;
                resultArea.setText("Congratulations! You guessed correctly!\nYou won " + playerBet + " coins.");
                roundResults[roundsPlayed] = playerBet; // Store the result of this round
            } else {
                totalMoney -= playerBet;
                resultArea.setText("Sorry, the correct number was " + randomNumber + ".\nYou lost " + playerBet + " coins.");
                roundResults[roundsPlayed] = -playerBet; // Store the result of this round
            }

            // Increment the rounds played
            roundsPlayed++;

            // Show remaining rounds and total money
            resultArea.append("\nRounds played: " + roundsPlayed + " out of 10\nTotal money: " + totalMoney + " coins.");
        } catch (NumberFormatException ex) {
            resultArea.setText("Please enter valid numbers for bet and guess.");
        }
    }

    public static void main(String[] args) {
        // Create and display the GUI
        SwingUtilities.invokeLater(() -> {
            GuessingGameGUI gui = new GuessingGameGUI();
            gui.setVisible(true);
        });
    }
}
